import fs from 'fs';
import fetch from 'node-fetch';
import axios from 'axios';

let timeout = 30000;
let poin = 500;

let handler = async (m, { conn, command, usedPrefix }) => {
    let fkontak = { "key": { "participants":"0@s.whatsapp.net", "remoteJid": "status@broadcast", "fromMe": false, "id": "Halo" }, "message": { "contactMessage": { "vcard": `BEGIN:VCARD\nVERSION:3.0\nN:Sy;Bot;;;\nFN:y\nitem1.TEL;waid=${m.sender.split('@')[0]}:${m.sender.split('@')[0]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD` }}, "participant": "0@s.whatsapp.net" };  
    if (!db.data.chats[m.chat].game) throw `Os jogos estão desativados neste grupo. Para ativá-los, use: #on jogos`;
    conn.tekateki = conn.tekateki ? conn.tekateki : {};
    conn.bandeiras = conn.bandeiras ? conn.bandeiras : {};
    let id = m.chat;
    if (id in conn.tekateki) {
        conn.reply(m.chat, 'Ainda há um jogo não respondido neste chat', conn.tekateki[id][0]);
        throw false;
    }

    try {    
        if (command == 'acertijo' || command == 'acert' || command == 'adivinhança' || command == 'tekateki') {
            let tekateki = JSON.parse(fs.readFileSync(`./src/game/acertijo.json`));
            let json = tekateki[Math.floor(Math.random() * tekateki.length)];
            let _clue = json.response;
            let clue = _clue.replace(/[A-Za-z]/g, '_');
            let caption = `
ⷮ *${json.question}*

*• Tempo:* ${(timeout / 1000).toFixed(2)} segundos
*• Bônus:* +${poin} XP
`.trim();
            conn.tekateki[id] = [
                await conn.reply(m.chat, caption, m),
                json, poin, setTimeout(async () => {
                    if (conn.tekateki[id]) await conn.reply(m.chat, `O tempo acabou!\n*Resposta:* ${json.response}`, conn.tekateki[id][0]);
                    delete conn.tekateki[id];
                }, timeout)
            ];
        }

        if (command == 'advpe' || command == 'adv' || command == 'filmes' || command == 'filme') {    
            let tekateki = JSON.parse(fs.readFileSync(`./src/game/peliculas.json`));
            let json = tekateki[Math.floor(Math.random() * tekateki.length)];
            let _clue = json.response;
            let clue = _clue.replace(/[A-Za-z]/g, '_');
            let caption = `
ⷮ *${json.question}*

*• Tempo:* ${(timeout / 1000).toFixed(2)} segundos
*• Bônus:* +${poin} XP
`.trim();
            conn.tekateki[id] = [
                await conn.sendMessage(m.chat, { text: caption, contextInfo:{forwardingScore: 9999999, isForwarded: true, "externalAdReply": {"showAdAttribution": true, "containsAutoReply": true, "body": `• ADIVINHE O FILME COM EMOJIS •`, "previewType": "PHOTO", thumbnail: imagem1, sourceUrl: md}}}, { quoted: m, ephemeralExpiration: 24*60*100, disappearingMessagesInChat: 24*60*100}),
                json, poin, setTimeout(async () => {
                    if (conn.tekateki[id]) await conn.reply(m.chat, `O tempo acabou!\n*Resposta:* ${json.response}`, conn.tekateki[id][0]);
                    delete conn.tekateki[id];
                }, timeout)
            ];
        }

        if (command == 'cancion' || command == 'canção') {
            // Implementação do jogo de adivinhação de músicas
        }

        if (command == 'palavra' || command == 'word' || command == 'ordenar' || command == 'order') {
            // Implementação do jogo de adivinhação de palavras
        }

        if (command == 'trivia' || command == 'triviador') {
            // Implementação do jogo de trivia
        }

        if (command == 'hint' || command == 'pista') {
            // Implementação do comando de dica
        }

        if (command == 'bandeira' || command == 'banderas') {
            let bandeiras = JSON.parse(fs.readFileSync(`./src/game/flags.json`));
            let bandeira = bandeiras[Math.floor(Math.random() * bandeiras.length)];
            let caption = `
Adivinhe a bandeira do país!

Dica: O país é conhecido por ${bandeira.country}.
`.trim();
            conn.bandeiras[id] = [
                await conn.reply(m.chat, caption, m),
                bandeira, setTimeout(async () => {
                    if (conn.bandeiras[id]) await conn.reply(m.chat, `O tempo acabou!\nA resposta era ${bandeira.flag}`, conn.bandeiras[id][0]);
                    delete conn.bandeiras[id];
                }, timeout)
            ];
        }
    } catch (e) {
        await conn.reply(m.chat, `Houve um erro ao executar o comando ${usedPrefix + command}\n\n${wm}`, fkontak, m);
        console.log(`❗❗ Houve um erro ao executar o comando ${usedPrefix + command} ❗❗`);
        console.log(e);
    }
};

handler.help = ['acertijo'];
handler.tags = ['jogo'];
handler.command = /^(acertijo|acert|adivinhança|tekateki|advpe|adv|filmes|filme|cancion|canção|palavra|word|ordenar|order|trivia|triviador|hint|pista|bandeira|banderas)$/i;

export default handler;

async function fetchJson(url, options) {
    try {
        options ? options : {};
        const res = await axios({method: 'GET', url: url, headers: {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'}, ...options});
        return res.data;
    } catch (err) {
        return err;
    }
}
